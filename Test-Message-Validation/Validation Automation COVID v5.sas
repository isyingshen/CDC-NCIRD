 /********************************************************************/
 /* PROGRAM NAME: Validation Automation                              */
 /* VERSION: 4.0                                                     */
 /* CREATED: 2020/11/19                                              */
 /*                                                                  */
 /* BY:  Ying Shen                                                   */
 /*                                                                  */
 /* PURPOSE:  This program is to automate the process of             */
 /*           Test Message Validation. It concludes two rounds of    */
 /*           validation. Validation1: all the sent variables are    */
 /*           matching what they are in NNAD. Validation2: all       */
 /*           not sent variables are not in NNAD                     */
 /*                                                                  */ 
 /* INPUT:    DataDictionary_tf_11065-extracted.xlsx                 */
 /*           Three local_record_ids                                 */
 /*                                                                  */ 
 /* OUTPUT: DataDictionary_tf_11065_not_toggled_var.xlsx             */
 /*         Validation_Report_Test_Record.xlsx                       */
 /*         Validation_Report_Untoggled_Var.xlsx                     */ 
 /*                                                                  */ 
 /* Date Modified: 2021/03/01                                        */
 /* Modified by: Ying Shen                                           */
 /* Changes: Add date to the outputs                                 */
 /*                                                                  */
 /* Date Modified: 2021/06/23                                        */
 /* Modified by: Ying Shen                                           */ 
 /* Changes: 1.Added "N/A" to compare in creating table compare_r1,  */
 /*          compare_r4, compare_r5                                  */
 /*          2. Added lowcase function and compress function in      */
 /*          creating table compare_r1,compare_r4, compare_r5        */
 /*          3. Added both NNAD var and TM var                       */
 /*                                                                  */
 /* Date Modified: 2021/09/30                                        */
 /* Modified by: Ying Shen                                           */ 
 /* Changes: Updated for using T3_vertical for lab vars              */
 /*                                                                  */
 /* Date Modified: 2022/2/8-2/9                                      */
 /* Modified by: Ying Shen                                           */ 
 /* Changes: 1. Use TCSW's order for the validation report           */
 /*          2. Automatically match race                             */
 /*          3. Automatically match for test_type                    */
 /*          4. Automatically match for specimen_source              */
 /*          5. unpopulate not_toggled_var.xlsx                      */
 /*          6. remove vars that are generated by Starter Code,      */
 /*             e.g., mmwr_week in the untoggled validation rpt      */
 /*          7. added condition, de, de_identifier into untoggled    */
 /*             validation rpt                                       */
 /*          8. reorder the untoggled validation rpt                 */
 /*          9. Revise the column header for TM1-TM5                 */
 /*                                                                  */
 /* Date Modified: 2022/8/15                                         */
 /* Modified by: Ying Shen                                           */
 /* Added DE condition to join                                       */
 /*      from expo1_QA as a                                          */
 /*      left join expo_var_2G as b                                  */
 /*      on (a.test_record=b.test_record and                         */
 /*      a.Data_Element__DE__Name=b.Data_Element__DE__Name)          */
 /*                                                                  */
 /* Date Modified: 2022/10/21                                        */
 /* Modified by: Ying Shen                                           */
 /* Improve the contact type (M2F). It is automatically matched      */
 /*    in the Validation Report. (Same for Binational Report)        */
 /*                                                                  */
 /* Date Modified: 2023/12/7                                         */
 /* Modified by: Ying Shen                                           */
 /* Remove the code to convert .E, .Y and variable age               */
 /********************************************************************/

/*Tell This Validation Program ID of the Test Records*/
/*!!!!! needs to update before running the program*/
%let test_record1_nnad = 2302647;
%let test_record4_nnad = 2549751;
%let test_record5_nnad = 2287079;

%let test_record1_nnad_n = _2302647;
%let test_record4_nnad_n = _2549751;
%let test_record5_nnad_n = _2287079;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

COVID-19 Starter Code Started

This code is used to pull COVID-19 cases from the Stage 4 NCIRD NNDSS Analytic Database (NNAD). 
This code adds BOLUS of data from the task force and use of the variable list to extract data for analysis.  

This is revised by Ying Shen
Remove Formats
No output

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


%let rootdir =\\cdc\project\NIP_Project_Store1\Surveillance\Surveillance_NCIRD_3\NMI\Test;

*Sasautos specifies folders to search in the order to locate the macro;
options mprint mlogic noxwait symbolgen
        sasautos = (sasautos,
                    "&rootdir\Source\Macros"
                    );

libname sasfmt "&rootdir\Source\Formats";

/* excel dictionary with user extract flag */

libname usrD XLSX "&testdir\Output\DD-extracted.xlsx";
/*libname usrD XLSX "\\cdc.gov\project\NIP_Project_Store1\Surveillance\Pam S\KS Test message review\DataDictionary_tf_11065-for extract_Pam KS.xlsx";*/

*This line connects to the NNAD STAGING database; 
libname NNAD OLEDB
        provider="sqloledb"
        properties = ( "data source"="dssv-infc-1601\qsrv1"
                       "Integrated Security"="SSPI"
                       "Initial Catalog"="NCIRD_DVD_VPD" ) schema=NNDSS access=readonly;

/* extract Stage4 variable list from excel dictionary and assign to macro */


proc sql noprint;
   select Var_Name
   into :vlist separated by ' '
   from usrD.stage4dict
   where Extract = '1' 
/*   where Extract = 1*/
   ;
quit;
%put List of variables to extract: &vlist;

data stage4dict;
   set sasfmt.stage4dict_tf_11065;
run;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using the Macro provided will cut down on the processing time and create a ready-to-go analytic database.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
%extractstg4(outdatasetname=stg4_Exl,
             SQLlibname=NNAD,
             Stg4DictName=stage4dict,
             filter=%nrstr(condition in ("11065")),
             /*only edit below this comment line*/
             varlist= &vlist
            ); /* end of macro call */

%extractstg4(outdatasetname=stg4_manual,
             SQLlibname=NNAD,
             Stg4DictName=stage4dict,
             filter=%nrstr(condition in ("11065")),
             /*only edit below this comment line*/
             varlist= source_system case_status n_expandedcaseid n_cdcdate result_status
				 
			);

;*/;*;*;*;*/;*';*";quit;run; /* this line exits from unbalanced quotation problem and others */
/* merge multiple extractions into one dataset */
proc sql noprint;
   create table stg4 as
   select *
   from stg4_Exl as a left join stg4_manual as b 
   on a.condition = b.condition and a.report_jurisdiction = b.report_jurisdiction and
      a.local_record_id = b.local_record_id and a.mmwr_year = b.mmwr_year and a.site = b.site and
      a.wsystem = b.wsystem and a.dup_sequenceID = b.dup_sequenceID           
   ;
quit;

/* DEDUPLICATION AND DATA CLEANING FOR NNAD STAGE4 DATA*/
data stage4_11065 error_nokey;
   set stg4;
  

   if (source_system in (5,15)) then 
      firstkey=cats(report_jurisdiction,compress(local_record_id)); /* For HL7 records, look at local_record_id */
   else if ((source_system=1) and (WSYSTEM=5)) then
      firstkey=cats(report_jurisdiction,compress(n_expandedcaseid)); /* For NETSS records created from MVPS, look at n_expandedcaseid */  
   else if ((source_system=1) and (WSYSTEM NE 5)) then
      firstkey=cats(report_jurisdiction,compress(local_record_id),site,mmwr_year); /* For other NETSS records, look at local_record_id (CASEID), site, mmwr_year */

   output stage4_11065;

   if (firstkey = '') then
      output error_nokey;
run;
proc sort tagsort data=stage4_11065;
   by firstkey descending source_system descending n_cdcdate; /* Prefer HL7 record over NETSS duplicate, newer NETSS record over older */
run;

/* Duplicates by match of local_record_id/n_expandedcaseid are removed */
data stage4_clean stage4_remove;
   set stage4_11065;
   by firstkey;

if ((first.firstkey) and (result_status NE ' ') and (case_status NE '')) then
      output stage4_clean;

   else 
      output stage4_remove;
run;


*Reformatting date variables to SAS date;

*Creating macro variables;
proc sql noprint;
   select compress(NAME)
   into :dtlist separated by " "
   from dictionary.columns
   where libname='WORK' and format='DATETIME22.3' and memname='NNAD';

   /*creates idummy variable names*/
   select catt(compress(NAME, "_"), "_i")
   into :idtlist separated by ' '
   from dictionary.columns
   where libname='WORK' and format='DATETIME22.3' and memname='NNAD';

   select count(NAME)
   into :num separated by " " /*enumerates number of variables*/
   from dictionary.columns
   where libname='WORK' and format='DATETIME22.3' and memname='NNAD';

   /*create list of variables to rename*/
   select catt(catt(compress(NAME, "_"), "_i"), '= ', NAME)
   into :relist separated by ' '
   from dictionary.columns
   where libname='WORK' and format='DATETIME22.3' and memname='NNAD';
quit;


*Array to convert data;
data nnad;
   set stage4_clean;

   format &idtlist mmddyy10.;
   array dtchng{&num} &dtlist;
   array idtchng{&num} &idtlist;
   do i=1 to &num;
      idtchng{i}=datepart(dtchng{i});
   end;

   drop &dtlist i;
run;

*Renaming converted data variables to original variable names;
proc datasets lib=work nolist;
   modify nnad;
   rename &relist;
run;
quit;

data nnad;
   set nnad;

   if n_count<1 then
      n_count=1;

   do i=1 to n_count; /* explode NETSS cases with a count > 1 */
      output;
   end;
   drop i;
run;

data temp;
   set nnad;
   pk = compress(local_record_id||mmwr_year||condition||wsystem);
run;

proc sql;
   create table temp2 as
   select *, count(pk) as freq
   from temp
   group by pk;
quit;
run;

*Removing duplicate HL7 records where site is NULL/S01;

data nnad;
   set temp2;
   if (freq > 1 and site = 'S01' and source_system ne 1) then
      delete;
run;

proc sql;
create table nnad_sas as
	select *
	from nnad
where local_record_id in ("&test_record1_nnad", "&test_record4_nnad", "&test_record5_nnad");
quit;

/*Transpose the starter code output*/
proc transpose data=nnad_sas out =var_value_NNAD_nl;
	ID local_record_id;
	var _all_;
run;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

COVID-19 Starter Code End

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/




/*Import QCNNADFormat into sas*/
/*libname formats xlsx "\\cdc\project\NIP_Project_Store1\Surveillance\Surveillance_NCIRD_3\NMI\Test\Source\Formats\QCNNADFormats.xlsx";*/

/*Applend all tabs */
/*proc sql noprint;*/
/*	select cats(libname,'.',memname) into :qcformats*/
/*	separated by ' '*/
/*	from dictionary.tables*/
/*	where lowcase(libname) ='formats';*/
/*quit;*/

/*Make it a macro variable*/
/*%put &qcformats;*/

/*Save all formats to one dataset*/
/*data qcformats_all;*/
/*	set &qcformats;*/
/*run;*/

/*proc sql;*/
/*	create table qcformats_all_clean as*/
/*	select * */
/*	from qcformats_all*/
/*	where( FmtName not in ('VAXTYPE','VAXMFR')*/
/*	and lowcase(Start) not in ('1','2','3','4','5','6','oth','n')*/
/*	and lowcase(End) not in ('1','2','3','4','5','6','oth','n')*/
/*	and Label not in ('unknown'));*/
/*quit;*/



/* Import Starter Code output into sas */
/*proc import datafile="&testdir\COVID19_TEST_StarterCodeReportwithlab-TMLook-UT 22NOV2020.xlsx"*/
/*	DBMS=EXCEL out=var_value_NNAD replace;*/
/*	range = "Data_NNAD$";*/
/*	getnames=yes;*/
/*	mixed = yes;*/
/*	scantext = yes;*/
/*	usedate=yes;*/
/*run;*/

/*Transpose the starter code output*/
/*proc transpose data=var_value_NNAD out =var_value_NNAD_nl;*/
/*	ID Obs;*/
/*	VAR &vlist;*/
/*run;*/

/* Import Transposed Starter Code output into sas */
/*proc import datafile="&testdir\nnad_sas.xlsx"*/
/*	DBMS=EXCEL out=var_value_NNAD_nl replace;*/
/*	range = "Transposed_NNAD$";*/
/*	getnames=yes;*/
/*	mixed = yes;*/
/*	scantext = yes;*/
/*	usedate=yes;*/
/*run;*/

/* Import Dictionary with Format column into sas */
/*proc import datafile="&testdir\DataDictionary_tf_11065_New_EF20201202.xlsx"*/
/*	DBMS=EXCEL out=format_name replace;*/
/*	range = "stage4dict_tf_11065$";*/
/*	getnames=yes;*/
/*	mixed = yes;*/
/*	scantext = yes;*/
/*	usedate=yes;*/
/*run;*/

/********************************************************************/
/*Non-repeating starts*/
/********************************************************************/
/*Get the Test Message Review Data*/
proc sql;
	create table vali_non_repeat as
	select DE_Name
	,Var_Name as Var_Name_Test_Message
	,Test_Record_1
	,Test_Record_4 as Test_Record_4
	,Test_Record_5 as Test_Record_5
	from extract_non_repeat;
quit;
/********************************************************************/
/*Non-repeating ends*/
/********************************************************************/

/********************************************************************/
/*Model 1G and 1GDT start*/
/********************************************************************/
/*Get the Test Message Review Data*/
proc sql;
create table vali_1g as
	select DE_Name
	,Var_Name_M1G as Var_Name_Test_Message
	,Test_Record_1
	,Test_Record_4 as Test_Record_4
	,Test_Record_5 as Test_Record_5
	from M1G_element2;
quit;
/********************************************************************/
/*Model 1G and 1GDT end*/
/********************************************************************/

/********************************************************************/
/*Model 2G starts*/
/********************************************************************/
/*Test_Record_1 starts*/
/*Get the Test Message Review Data*/
proc sql;
	create table vali_2g_r1_orig as 
	select Data_Element__DE__Name
	,Test_Record_1 as test_record
	from testMsgRev_clean
	where Data_Element__DE__Name in ('Exposure','Exposure Indicator','Clinical Finding','Clinical Finding Indicator'
,'Signs and Symptoms','Signs and Symptoms Indicator')
	or Data_Element__DE__Name like 'Patient Epidemiological Risk%';
quit;

/*Get the row number because I want to match Q and A*/
proc sql;
	create table vali_2g_r1_row as
	select * 
	,monotonic() as row
	from vali_2g_r1_orig;
quit;

/*Sort by DE*/
proc sort data=vali_2g_r1_row;
	by Data_Element__DE__Name row;
run;

/*Reassign the number to match Q and A*/
data vali_2g_r1_row_QA_match;
	set vali_2g_r1_row;
	by Data_Element__DE__Name;
	if first.Data_Element__DE__Name then QA_num=1;
	else QA_num +1;
run;

/*Separate Q and A :Exposure*/
proc sql;
/*Q*/
create table expo1_Q as
select *
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Exposure';


/*A*/
create table expo1_A as
select *
,test_record as test_record_A
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Exposure Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table expo1_QA as
	select * 
	from expo1_Q as a
	left join expo1_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: 'Clinical Finding' */
proc sql;
/*Q*/
create table clinical_Q as
select *
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Clinical Finding';


/*A*/
create table clinical_A as
select *
,test_record as test_record_A
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Clinical Finding Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table clinical_QA as
	select * 
	from clinical_Q as a
	left join clinical_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: Signs and Symptoms*/
proc sql;
/*Q*/
create table signs_Q as
select *
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms';


/*A*/
create table signs_A as
select *
,test_record as test_record_A
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table signs_QA as
	select * 
	from signs_Q as a
	left join signs_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A Patient Epidemiological Risk*/
proc sql;
/*Q*/
create table risk_Q as
select *
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Factors';


/*A*/
create table risk_A as
select *
,test_record as test_record_A
from vali_2g_r1_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table risk_QA as
	select * 
	from risk_Q as a
	left join risk_A as b
	on a.QA_num=b.QA_num;
quit;

/*Append all 4 m2g*/
proc append base=expo1_QA data=clinical_QA;
run;
proc append base=expo1_QA data=signs_QA;
run;
proc append base=expo1_QA data=risk_QA;
run;

/*Get the Var_Name*/
proc sql;
create table vali_2g_r1 as
select 
distinct a.Data_Element__DE__Name as DE_Name
,b.Var_Name as Var_Name_Test_Message
,a.test_record_A as Test_Record_1
from expo1_QA as a
left join expo_var_2G as b
on (a.test_record=b.test_record and a.Data_Element__DE__Name=b.Data_Element__DE__Name)
where a.test_record is not null
and a.test_record not in ('<blank>')
and b.Var_Name is not null;
quit;
/*Test_Record_1 ends*/

/*Test_Record_4 starts*/
/*Get the Test Message Review Data*/
proc sql;
	create table vali_2g_r4_orig as 
	select Data_Element__DE__Name
	,Test_Record_4 as test_record
	from testMsgRev_clean
	where Data_Element__DE__Name in ('Exposure','Exposure Indicator','Clinical Finding','Clinical Finding Indicator'
,'Signs and Symptoms','Signs and Symptoms Indicator')
	or Data_Element__DE__Name like 'Patient Epidemiological Risk%';
quit;

/*Get the row number because I want to match Q and A*/
proc sql;
	create table vali_2g_r4_row as
	select * 
	,monotonic() as row
	from vali_2g_r4_orig;
quit;

/*Sort by DE*/
proc sort data=vali_2g_r4_row;
	by Data_Element__DE__Name row;
run;

/*Reassign the number to match Q and A*/
data vali_2g_r4_row_QA_match;
	set vali_2g_r4_row;
	by Data_Element__DE__Name;
	if first.Data_Element__DE__Name then QA_num=1;
	else QA_num +1;
run;

/*Separate Q and A :Exposure*/
proc sql;
/*Q*/
create table expo4_Q as
select *
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Exposure';


/*A*/
create table expo4_A as
select *
,test_record as test_record_A
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Exposure Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table expo4_QA as
	select * 
	from expo4_Q as a
	left join expo4_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: 'Clinical Finding' */
proc sql;
/*Q*/
create table clinical4_Q as
select *
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Clinical Finding';


/*A*/
create table clinical4_A as
select *
,test_record as test_record_A
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Clinical Finding Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table clinical4_QA as
	select * 
	from clinical4_Q as a
	left join clinical4_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: Signs and Symptoms*/
proc sql;
/*Q*/
create table signs4_Q as
select *
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms';


/*A*/
create table signs4_A as
select *
,test_record as test_record_A
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table signs4_QA as
	select * 
	from signs4_Q as a
	left join signs4_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A Patient Epidemiological Risk*/
proc sql;
/*Q*/
create table risk4_Q as
select *
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Factors';


/*A*/
create table risk4_A as
select *
,test_record as test_record_A
from vali_2g_r4_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table risk4_QA as
	select * 
	from risk4_Q as a
	left join risk4_A as b
	on a.QA_num=b.QA_num;
quit;

/*Append all 4 m2g*/
proc append base=expo4_QA data=clinical4_QA;
run;
proc append base=expo4_QA data=signs4_QA;
run;
proc append base=expo4_QA data=risk4_QA;
run;

/*Get the Var_Name*/
proc sql;
create table vali_2g_r4 as
select 
distinct a.Data_Element__DE__Name as DE_Name
,b.Var_Name as Var_Name_Test_Message
,a.test_record_A as Test_Record_4
from expo4_QA as a
left join expo_var_2G as b
on a.test_record=b.test_record
where a.test_record is not null
and a.test_record not in ('<blank>')
and b.Var_Name is not null;
quit;
/*Test_Record_4 ends*/

/*Test_Record_5 starts*/
/*Get the Test Message Review Data*/
proc sql;
	create table vali_2g_r5_orig as 
	select Data_Element__DE__Name
	,Test_Record_5 as test_record
	from testMsgRev_clean
	where Data_Element__DE__Name in ('Exposure','Exposure Indicator','Clinical Finding','Clinical Finding Indicator'
,'Signs and Symptoms','Signs and Symptoms Indicator')
	or Data_Element__DE__Name like 'Patient Epidemiological Risk%';
quit;

/*Get the row number because I want to match Q and A*/
proc sql;
	create table vali_2g_r5_row as
	select * 
	,monotonic() as row
	from vali_2g_r5_orig;
quit;

/*Sort by DE*/
proc sort data=vali_2g_r5_row;
	by Data_Element__DE__Name row;
run;

/*Reassign the number to match Q and A*/
data vali_2g_r5_row_QA_match;
	set vali_2g_r5_row;
	by Data_Element__DE__Name;
	if first.Data_Element__DE__Name then QA_num=1;
	else QA_num +1;
run;

/*Separate Q and A :Exposure*/
proc sql;
/*Q*/
create table expo5_Q as
select *
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Exposure';


/*A*/
create table expo5_A as
select *
,test_record as test_record_A
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Exposure Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table expo5_QA as
	select * 
	from expo5_Q as a
	left join expo5_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: 'Clinical Finding' */
proc sql;
/*Q*/
create table clinical5_Q as
select *
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Clinical Finding';


/*A*/
create table clinical5_A as
select *
,test_record as test_record_A
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Clinical Finding Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table clinical5_QA as
	select * 
	from clinical5_Q as a
	left join clinical5_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A: Signs and Symptoms*/
proc sql;
/*Q*/
create table signs5_Q as
select *
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms';


/*A*/
create table signs5_A as
select *
,test_record as test_record_A
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name ='Signs and Symptoms Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table signs5_QA as
	select * 
	from signs5_Q as a
	left join signs5_A as b
	on a.QA_num=b.QA_num;
quit;

/*Separate Q and A Patient Epidemiological Risk*/
proc sql;
/*Q*/
create table risk5_Q as
select *
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Factors';


/*A*/
create table risk5_A as
select *
,test_record as test_record_A
from vali_2g_r5_row_QA_match
where Data_Element__DE__Name like 'Patient Epidemiological%Indicator';
quit;

/*Merge Q and A*/
proc sql;
create table risk5_QA as
	select * 
	from risk5_Q as a
	left join risk5_A as b
	on a.QA_num=b.QA_num;
quit;

/*Append all 4 m2g*/
proc append base=expo5_QA data=clinical5_QA;
run;
proc append base=expo5_QA data=signs5_QA;
run;
proc append base=expo5_QA data=risk5_QA;
run;

/*Get the Var_Name*/
proc sql;
create table vali_2g_r5 as
	select 
	distinct a.Data_Element__DE__Name as DE_Name
	,b.Var_Name as Var_Name_Test_Message
	,a.test_record_A as Test_Record_5
	from expo5_QA as a
	left join expo_var_2G as b
	on a.test_record=b.test_record
	where a.test_record is not null
	and a.test_record not in ('<blank>')
	and b.Var_Name is not null;
quit;
/*Test_Record_5 ends*/

/********************************************************************/
/*Model 2G ends*/
/********************************************************************/

/********************************************************************/
/*Model 1F starts*/
/********************************************************************/

proc sql;
/*test record1*/
create table vali_1F_r1 as
	select Data_Element__DE__Name as DE_Name
	,Var_Name1F as Var_Name_Test_Message
	,Test_Record_1
	from data1F_var;

/*test record4*/
create table vali_1F_r4 as
	select Data_Element__DE__Name as DE_Name
	,Var_Name1F as Var_Name_Test_Message
	,Test_Record_4
	from data1F_var;

/*test record5*/
create table vali_1F_r5 as
	select Data_Element__DE__Name as DE_Name
	,Var_Name1F as Var_Name_Test_Message
	,Test_Record_5
	from data1F_var;
quit;

/********************************************************************/
/*Model 1F ends*/
/********************************************************************/


/********************************************************************/
/*Model 2F starts*/
/********************************************************************/
proc sql;
/*	test record 1*/
create table vali_2f_r1 as
	select a.Data_Element__DE__Name as DE_Name
	,a.Test_Record_1
	,b.Var_Name as Var_Name_Test_Message
	from data_2F a
	left join data2F_var b
	on a.Test_Record_1=b.test_record;

/*	test record 4*/
create table vali_2f_r4 as
	select a.Data_Element__DE__Name as DE_Name
	,a.Test_Record_4
	,b.Var_Name as Var_Name_Test_Message
	from data_2F a
	left join data2F_var b
	on a.Test_Record_4=b.test_record;

/*	test record 5*/
create table vali_2f_r5 as
	select a.Data_Element__DE__Name as DE_Name
	,a.Test_Record_5
	,b.Var_Name as Var_Name_Test_Message
	from data_2F a
	left join data2F_var b
	on a.Test_Record_5=b.test_record;
quit;

/********************************************************************/
/*Model 2F ends*/
/********************************************************************/

/********************************************************************/
/*Model 3G starts*/
/********************************************************************/
proc sql;
/*Test_Record_1*/
create table vali_3g_r1 as
	select distinct Data_Element__DE__Name as DE_Name
	,Var_Name_m3g as Var_Name_Test_Message
	,Test_Record_1
	from data_m3g_record1_all;

/*Test_Record_4*/
	create table vali_3g_r4 as
	select distinct Data_Element__DE__Name as DE_Name
	,Var_Name_m3g as Var_Name_Test_Message
	,Test_Record_4 as Test_Record_4
	from data_m3g_record4_all;

/*Test_Record_5*/
	create table vali_3g_r5 as
	select distinct Data_Element__DE__Name as DE_Name
	,Var_Name_m3g as Var_Name_Test_Message
	,Test_Record_5 as Test_Record_5
	from data_m3g_record5_all;
quit;

/********************************************************************/
/*Model 3G ends*/
/********************************************************************/


/*create vali_r1_all to store all record 1 data*/
proc sql;
	create table vali_r1_all as
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_1
	from vali_non_repeat
	union
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_1
	from vali_1g;
quit;

/*Append data for test record1*/
proc append base =vali_r1_all data=vali_2g_r1 Force;
run;
proc append base =vali_r1_all data=vali_1f_r1 Force;
run;
proc append base =vali_r1_all data=vali_2f_r1 Force;
run;
/*proc append base =vali_r1_all data=vali_3g_r1 Force;*/
/*run;*/


/*Output the comparison dataset*/
proc sql;
create table compare_r1 as
	select distinct b.DE_Name
	,b.Var_Name_Test_Message as Var_Name_TM
	,a._NAME_ as Var_Name_NNAD
	,a.&test_record1_nnad_n as Value_NNAD
	,b.Test_Record_1
	,case 
	when compress(lowcase(a.&test_record1_nnad_n),,'s')=compress(lowcase(b.Test_Record_1),,'s') then 'Y'
	when a.&test_record1_nnad_n is null and b.Test_Record_1 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED') then 'Y'
	when a.&test_record1_nnad_n is null and b.Test_Record_1 is null then 'Y'
	when a.&test_record1_nnad_n in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') and b.Test_Record_1 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') then 'Y'
/*	Auto match race M2F*/
	when b.Var_Name_Test_Message in ('Black') and b.Test_Record_1 in ('2054-5') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('White') and b.Test_Record_1 in ('2106-3') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Asian') and b.Test_Record_1 in ('2028-9') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Race_unk') and b.Test_Record_1 in ('UNK') and a.&test_record1_nnad_n in ('Y') then 'Y'
/*	Auto match contact type M2F*/
	when b.Var_Name_Test_Message in ('community_acquired') and b.Test_Record_1 in ('277057000') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('healthcare_contact') and b.Test_Record_1 in ('PHC2268') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('household_contact') and b.Test_Record_1 in ('PHC2127') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_oth_txt') and b.Test_Record_1 in ('OTH') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_unk') and b.Test_Record_1 in ('UNK') and a.&test_record1_nnad_n in ('Y') then 'Y'
/*	Auto match Binational Report M2F*/
	when b.Var_Name_Test_Message in ('binatl_product_exp') and b.Test_Record_1 in ('PHC1140') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_case_contacts') and b.Test_Record_1 in ('PHC1139') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_other_situations') and b.Test_Record_1 in ('PHC1141') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_by_res') and b.Test_Record_1 in ('PHC1215') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_in_country') and b.Test_Record_1 in ('PHC1138') and a.&test_record1_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_res_of_country') and b.Test_Record_1 in ('PHC1138') and a.&test_record1_nnad_n in ('Y') then 'Y'

end as Match
	from vali_r1_all as b 
	left join var_value_NNAD_nl as a
	on compress(lowcase(b.Var_Name_Test_Message))=compress(lowcase(a._NAME_))

/*	where b.Var_Name_Test_Message is not null*/
	order by b.DE_Name,b.Var_Name_Test_Message;
quit;


/*Merge tables: Test Message Review and MMG Auto*/
proc sql;
create table DE_order as
	select * 
	from testMsgRev_clean as a
	left join mmgAuto_clean as b
	on (lowcase(a.DE_Identifier_Sent_in_HL7_Messag)=lowcase (b.DE_Identifier) or lowcase(a.Data_Element__DE__Name)=lowcase(b.DE_Name))
	order by order;
quit;


/*Better format the comparison*/
proc sql;
create table compare_r1_better_format as
select a.condition
/*,a.DE_Name*/
,a.DE_Identifier_Sent_in_HL7_Messag as DE_Identifier
,b.DE_Name 
,b.Var_Name_TM as Var_Name
/*,b.Var_Name_NNAD as Var_Name_in_NNAD*/
,b.Test_Record_1 as Value_TM1
,b.Value_NNAD as Value_NNAD
,b.Match
,order
from DE_order as a
full join compare_r1 as b
on compress(lowcase(a.DE_Name))=compress(lowcase(b.DE_Name))
where b.DE_Name is not null
order by condition desc,order asc,b.Var_Name_TM asc;
quit;

/*Dedup*/
options nolabel;
PROC SORT DATA=compare_r1_better_format
 OUT=compare_r1_better_format_dedup
 nodupkey ;
 BY condition DE_Name DE_Identifier Var_Name Value_TM1 Value_NNAD Match;
RUN ;

/*re-order */
proc sql;
create table compare_r1_better_fmt_dedup_re as
select *
from compare_r1_better_format_dedup
order by condition desc,order asc, Var_Name asc;
quit;


/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r1_better_fmt_dedup_re (keep=condition DE_Identifier DE_Name Var_Name Value_TM1 Value_NNAD Match)
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record1";
RUN;


/*Test Record4*/
/*create vali_r4_all to store all record 4 data*/
proc sql;
	create table vali_r4_all as
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_4
	from vali_non_repeat
	union
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_4
	from vali_1g;
quit;

/*Append data for test record1*/
proc append base =vali_r4_all data=vali_2g_r4 Force;
run;
proc append base =vali_r4_all data=vali_1f_r4 Force;
run;
proc append base =vali_r4_all data=vali_2f_r4 Force;
run;
/*proc append base =vali_r4_all data=vali_3g_r4 Force;*/
/*run;*/


proc sql;
create table compare_r4 as
	select distinct b.DE_Name
	,b.Var_Name_Test_Message as Var_Name_TM
	,a._NAME_ as Var_Name_NNAD
	,a.&test_record4_nnad_n as Value_NNAD
	,b.Test_Record_4
	,case 
	when compress(lowcase(a.&test_record4_nnad_n),,'s')=compress(lowcase(b.Test_Record_4),,'s') then 'Y'
	when a.&test_record4_nnad_n is null and b.Test_Record_4 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED') then 'Y'
	when a.&test_record4_nnad_n is null and b.Test_Record_4 is null then 'Y'
	when a.&test_record4_nnad_n in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') and b.Test_Record_4 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') then 'Y'
	when b.Var_Name_Test_Message in ('Black') and b.Test_Record_4 in ('2054-5') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('White') and b.Test_Record_4 in ('2106-3') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Asian') and b.Test_Record_4 in ('2028-9') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Race_unk') and b.Test_Record_4 in ('UNK') and a.&test_record4_nnad_n in ('Y') then 'Y'
	/*	Auto match contact type M2F*/
	when b.Var_Name_Test_Message in ('community_acquired') and b.Test_Record_4 in ('277057000') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('healthcare_contact') and b.Test_Record_4 in ('PHC2268') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('household_contact') and b.Test_Record_4 in ('PHC2127') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_oth_txt') and b.Test_Record_4 in ('OTH') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_unk') and b.Test_Record_4 in ('UNK') and a.&test_record4_nnad_n in ('Y') then 'Y'
/*	Auto match Binational Report M2F*/
	when b.Var_Name_Test_Message in ('binatl_product_exp') and b.Test_Record_4 in ('PHC1140') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_case_contacts') and b.Test_Record_4 in ('PHC1139') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_other_situations') and b.Test_Record_4 in ('PHC1141') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_by_res') and b.Test_Record_4 in ('PHC1215') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_in_country') and b.Test_Record_4 in ('PHC1138') and a.&test_record4_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_res_of_country') and b.Test_Record_4 in ('PHC1138') and a.&test_record4_nnad_n in ('Y') then 'Y'
end as Match
	from vali_r4_all as b 
	left join var_value_NNAD_nl as a
	on compress(lowcase(b.Var_Name_Test_Message))=compress(lowcase(a._NAME_))

/*	where b.Var_Name_Test_Message is not null*/
	order by b.DE_Name,b.Var_Name_Test_Message;
quit;

/*Better format the comparison*/
proc sql;
create table compare_r4_better_format as
select a.condition
/*,a.DE_Name*/
,a.DE_Identifier_Sent_in_HL7_Messag as DE_Identifier
,b.DE_Name 
,b.Var_Name_TM as Var_Name
/*,b.Var_Name_NNAD as Var_Name_in_NNAD*/
,b.Test_Record_4 as Value_TM4
,b.Value_NNAD as Value_NNAD
,b.Match
,order
from DE_order as a
full join compare_r4 as b
on compress(lowcase(a.DE_Name))=compress(lowcase(b.DE_Name))
where b.DE_Name is not null
order by condition desc,order asc,b.Var_Name_TM asc;
quit;

/*Dedup*/
options nolabel;
PROC SORT DATA=compare_r4_better_format
 OUT=compare_r4_better_format_dedup
 nodupkey ;
 BY condition DE_Name DE_Identifier Var_Name Value_TM4 Value_NNAD Match;
RUN ;

/*re-order */
proc sql;
create table compare_r4_better_fmt_dedup_re as
select *
from compare_r4_better_format_dedup
order by condition desc,order asc, Var_Name asc;
quit;


/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r4_better_fmt_dedup_re (keep=condition DE_Identifier DE_Name Var_Name Value_TM4 Value_NNAD Match)
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			 OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record4";
RUN;


/*Test Record5*/
/*create vali_r5_all to store all record 5 data*/
proc sql;
	create table vali_r5_all as
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_5
	from vali_non_repeat
	union
	select DE_Name
	,Var_Name_Test_Message
	,Test_Record_5
	from vali_1g;
quit;

/*Append data for test record1*/
proc append base =vali_r5_all data=vali_2g_r5 Force;
run;
proc append base =vali_r5_all data=vali_1f_r5 Force;
run;
proc append base =vali_r5_all data=vali_2f_r5 Force;
run;
/*proc append base =vali_r5_all data=vali_3g_r5 Force;*/
/*run;*/

proc sql;
create table compare_r5 as
	select distinct b.DE_Name
	,b.Var_Name_Test_Message as Var_Name_TM
	,a._NAME_ as Var_Name_NNAD
	,a.&test_record5_nnad_n as Value_NNAD
	,b.Test_Record_5
	,case 
	when compress(lowcase(a.&test_record5_nnad_n),,'s')=compress(lowcase(b.Test_Record_5),,'s') then 'Y'
	when a.&test_record5_nnad_n is null and b.Test_Record_5 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED') then 'Y'
	when a.&test_record5_nnad_n is null and b.Test_Record_5 is null then 'Y'
	when a.&test_record5_nnad_n in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') and b.Test_Record_5 in ('.','','<blank>','NOT REPORTED','do not collect','N/A','NOT COLLECTED','NOT SENDING') then 'Y'
	when b.Var_Name_Test_Message in ('Black') and b.Test_Record_5 in ('2054-5') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('White') and b.Test_Record_5 in ('2106-3') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Asian') and b.Test_Record_5 in ('2028-9') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('Race_unk') and b.Test_Record_5 in ('UNK') and a.&test_record5_nnad_n in ('Y') then 'Y'
	/*	Auto match contact type M2F*/
	when b.Var_Name_Test_Message in ('community_acquired') and b.Test_Record_5 in ('277057000') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('healthcare_contact') and b.Test_Record_5 in ('PHC2268') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('household_contact') and b.Test_Record_5 in ('PHC2127') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_oth_txt') and b.Test_Record_5 in ('OTH') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('contact_type_unk') and b.Test_Record_5 in ('UNK') and a.&test_record5_nnad_n in ('Y') then 'Y'
	/*	Auto match Binational Report M2F*/
	when b.Var_Name_Test_Message in ('binatl_product_exp') and b.Test_Record_5 in ('PHC1140') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_case_contacts') and b.Test_Record_5 in ('PHC1139') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_other_situations') and b.Test_Record_5 in ('PHC1141') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_by_res') and b.Test_Record_5 in ('PHC1215') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_exp_in_country') and b.Test_Record_5 in ('PHC1138') and a.&test_record5_nnad_n in ('Y') then 'Y'
	when b.Var_Name_Test_Message in ('binatl_res_of_country') and b.Test_Record_5 in ('PHC1138') and a.&test_record5_nnad_n in ('Y') then 'Y'
end as Match
	from vali_r5_all as b 
	left join var_value_NNAD_nl as a
	on compress(lowcase(b.Var_Name_Test_Message))=compress(lowcase(a._NAME_))

/*	where b.Var_Name_Test_Message is not null*/
	order by b.DE_Name,b.Var_Name_Test_Message;
quit;

/*Better format the comparison*/
proc sql;
create table compare_r5_better_format as
select a.condition
/*,a.DE_Name*/
,a.DE_Identifier_Sent_in_HL7_Messag as DE_Identifier
,b.DE_Name 
,b.Var_Name_TM as Var_Name
/*,b.Var_Name_NNAD as Var_Name_in_NNAD*/
,b.Test_Record_5 as Value_TM5
,b.Value_NNAD as Value_NNAD
,b.Match
,order
from DE_order as a
full join compare_r5 as b
on compress(lowcase(a.DE_Name))=compress(lowcase(b.DE_Name))
where b.DE_Name is not null
order by condition desc,order asc,b.Var_Name_TM asc;
quit;

/*Dedup*/
options nolabel;
PROC SORT DATA=compare_r5_better_format
 OUT=compare_r5_better_format_dedup
 nodupkey ;
 BY condition DE_Name DE_Identifier Var_Name Value_TM5 Value_NNAD Match;
RUN ;

/*re-order */
proc sql;
create table compare_r5_better_fmt_dedup_re as
select *
from compare_r5_better_format_dedup
order by condition desc,order asc, Var_Name asc;
quit;

/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r5_better_fmt_dedup_re (keep=condition DE_Identifier DE_Name Var_Name Value_TM5 Value_NNAD Match)
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			 OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record5";
RUN;

/*compare the lab vars for test record 1*/
proc sql;
create table compare_r1_lab as
select t3.condition
,t3.obx_3_1 as DE_Identifier
/*,t3.report_jurisdiction*/
/*,t3.local_record_id*/
,t3.var_name 
,t3.contentv_name
,r5.var_name_test_message as Converted_Name_TM1
,t3.obx_5 
,r5.test_record_1 as Value_TM1
,case
when t3.contentv_name =r5.var_name_test_message and t3.obx_5= r5.test_record_1 then "Y"
when t3.var_name in ('test_type')  and r5.test_record_1 is null then "Y"
when t3.var_name in ('spec_source')  and r5.test_record_1 is null then "Y"
end as Match
from NNAD.Stage3_NNDSSCasesT3_Vertical as t3
full join vali_3g_r1 as r5
on t3.contentv_name= r5.var_name_test_message
where t3.local_record_id in ("&test_record1_nnad")
;
quit;

/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r1_lab
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			 OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record1_lab_var";
RUN;

/*compare the lab vars for test record 4*/
proc sql;
create table compare_r4_lab as
select t3.condition
,t3.obx_3_1 as DE_Identifier
/*,t3.report_jurisdiction*/
/*,t3.local_record_id*/
,t3.var_name 
,t3.contentv_name
,r5.var_name_test_message as Converted_Name_TM1
,t3.obx_5 
,r5.test_record_4 as Value_TM4
,case
when t3.contentv_name =r5.var_name_test_message and t3.obx_5= r5.test_record_4 then "Y"
when t3.var_name in ('test_type')  and r5.test_record_4 is null then "Y"
when t3.var_name in ('spec_source')  and r5.test_record_4 is null then "Y"
end as Match
from NNAD.Stage3_NNDSSCasesT3_Vertical as t3
full join vali_3g_r4 as r5
on t3.contentv_name= r5.var_name_test_message
where t3.local_record_id in ("&test_record4_nnad")
;
quit;

/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r4_lab
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			 OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record4_lab_var";
RUN;

/*compare the lab vars for test record 5*/
proc sql;
create table compare_r5_lab as
select t3.condition
,t3.report_jurisdiction
,t3.local_record_id
,t3.obx_5
,t3.var_name
,t3.contentv_name
,r5.var_name_test_message
,r5.test_record_5
,case
when t3.contentv_name =r5.var_name_test_message and t3.obx_5= r5.test_record_5 then "Y"
end as Match

from NNAD.Stage3_NNDSSCasesT3_Vertical as t3
full join vali_3g_r5 as r5
on t3.contentv_name= r5.var_name_test_message
where t3.local_record_id in ("&test_record5_nnad")
;
quit;

proc sql;
create table compare_r5_lab as
select t3.condition
,t3.obx_3_1 as DE_Identifier
/*,t3.report_jurisdiction*/
/*,t3.local_record_id*/
,t3.var_name 
,t3.contentv_name
,r5.var_name_test_message as Converted_Name_TM1
,t3.obx_5 
,r5.test_record_5 as Value_TM5
,case
when t3.contentv_name =r5.var_name_test_message and t3.obx_5= r5.test_record_5 then "Y"
when t3.var_name in ('test_type')  and r5.test_record_5 is null then "Y"
when t3.var_name in ('spec_source')  and r5.test_record_5 is null then "Y"
end as Match
from NNAD.Stage3_NNDSSCasesT3_Vertical as t3
full join vali_3g_r5 as r5
on t3.contentv_name= r5.var_name_test_message
where t3.local_record_id in ("&test_record5_nnad")
;
quit;

/*Export extracted data into excel*/
PROC EXPORT DATA= compare_r5_lab
/*             OUTFILE= "&testdir\validation_test_record_results.xlsx"*/
			 OUTFILE= "&testdir\Output\Validation_Report_Toggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="validation_test_record5_lab_var";
RUN;

/********************************************************************/
/*NNAD -> Test Message starts*/
/*This is to toggled the untoggled vars and make sure they have no values*/
/********************************************************************/

/*Table to store the untoggled vars*/
proc sql;
	create table not_toggled_var as
	select b.tablename
	,b.Var_Name
	,b.sastype	
	,b.sqltype	
	,b.justlength	
	,b.DE_Identifier	
	,b.DE_Description	
	,b.value_set_content	
	,b.value_set_de_identifier	
	,b.netssforward
	,"1" as Extract
	from mmgAuto_clean a
	right join DataDictionary_extracted2F b
	on (a.DE_Identifier = b.DE_Identifier or a.DE_Name=b.DE_Description)
	where (a.Method in('1F','2F','2G','1G','1.5GDT')
	and b.Extract is null)
	or b.Var_Name='local_record_id'; 
quit;


/*Export extracted data into excel*/
/*PROC EXPORT DATA= not_toggled_var*/
/*             OUTFILE= "&testdir\Output\DD_Not_Toggled_Var.xlsx"*/
/*             DBMS=XLSX REPLACE;*/
/*      SHEET="stage4dict";*/
/*RUN;*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

COVID-19 Starter Code Started

This code is used to pull NNAD data for the untoggled vars in test message review

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/* excel dictionary with user extract flag */

/*libname usrD2 XLSX "&testdir\Output\DD_Not_Toggled_Var.xlsx";*/

*This line connects to the NNAD STAGING database; 
libname NNAD OLEDB
        provider="sqloledb"
        properties = ( "data source"="dssv-infc-1601\qsrv1"
                       "Integrated Security"="SSPI"
                       "Initial Catalog"="NCIRD_DVD_VPD" ) schema=NNDSS access=readonly;

/* extract Stage4 variable list from excel dictionary and assign to macro */

proc sql noprint;
   select Var_Name
   into :vlist_n separated by ' '
   from not_toggled_var
   where Extract = '1' 
/*   where Extract = 1*/
   ;
quit;
%put List of variables to extract: &vlist_n;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using the Macro provided will cut down on the processing time and create a ready-to-go analytic database.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
%extractstg4(outdatasetname=stg4_Exl_2,
             SQLlibname=NNAD,
             Stg4DictName=stage4dict,
             filter=%nrstr(condition in ("11065")),
             /*only edit below this comment line*/
             varlist= &vlist_n
            ); /* end of macro call */


;*/;*;*;*;*/;*';*";quit;run; /* this line exits from unbalanced quotation problem and others */

/* DEDUPLICATION AND DATA CLEANING FOR NNAD STAGE4 DATA*/
data stage4_11065_untoggle error_nokey_untoggle;
   set stg4_Exl_2;
  

   if (source_system in (5,15)) then 
      firstkey=cats(report_jurisdiction,compress(local_record_id)); /* For HL7 records, look at local_record_id */
   else if ((source_system=1) and (WSYSTEM=5)) then
      firstkey=cats(report_jurisdiction,compress(n_expandedcaseid)); /* For NETSS records created from MVPS, look at n_expandedcaseid */  
   else if ((source_system=1) and (WSYSTEM NE 5)) then
      firstkey=cats(report_jurisdiction,compress(local_record_id),site,mmwr_year); /* For other NETSS records, look at local_record_id (CASEID), site, mmwr_year */

   output stage4_11065_untoggle;

   if (firstkey = '') then
      output error_nokey_untoggle;
run;
proc sort tagsort data=stage4_11065_untoggle;
   by firstkey descending source_system ; /* Prefer HL7 record over NETSS duplicate, newer NETSS record over older */
run;


data nnad_untoggle;
   set stage4_11065_untoggle;

   *Converting character to numeric and adding special missing (E);

   array old {6} age_invest mmwr_week  illness_duration mmwr_year
                  days_in_hosp n_count;
   array new{6} iage_invest immwr_week iillness_duration
                 immwr_year idays_in_hosp in_count;
   array remove{6} rage_invest rmmwr_week  rillness_duration
                    rmmwr_year rdays_in_hosp rn_count;

   do i=1 to 6;
      remove{i}=ifn(lengthn(compress(old{i}, "`~!@#$%^&*()-_=+\|[]{};:',?/", 'ak'))>=1,1,0);
      if (anyalpha(old{i})<1 and (index(old{i}, ">")>0 or index(old{i}, "+")) or
          index(old{i}, "<")>0 or index(old{i}, "=")>0) then
         remove{i}=2; /*indicating <, >, = + values and turning into number for .Y*/

      if (remove{i} = 1) then
         new{i} = .E; *vaules with characters/special characters;
      else if (remove{i} = 2) then
         new{i} = .Y; *values with mathematical characters;
      else if (remove{i} = 0) then
         new{i} = input(old{i}, 4.); *converts to numeric;
   end;

   drop age_invest mmwr_week  illness_duration mmwr_year rage_invest
        rmmwr_week  rillness_duration rmmwr_year days_in_hosp
        rdays_in_hosp n_count rn_count;

   rename iage_invest=age_invest immwr_week=mmwr_week iillness_duration=illness_duration immwr_year=mmwr_year
          idays_in_hosp=days_in_hosp in_count=n_count;

   *Calculating age in years;

   if (iage_invest = .E) then
      age = .E;
   else if (age_invest_units = 'a') then
      age = iage_invest;
   else if (age_invest_units = 'mo') then
      age = int(iage_invest/12);
   else if (age_invest_units = 'wk') then
      age = int(iage_invest/52);
   else if (age_invest_units = 'd') then
      age = int(iage_invest/365.25);
   else if (age_invest_units = 'h') then
      age = int(iage_invest/8760);
   else if (age_invest_units = 'min') then
      age = int(iage_invest/525600);
   else if (age_invest_units='s') then
      age = int(iage_invest/32000000);
   else if (age_invest_units='UNK' or iage_invest=9999) then
      age=999;
   else
      age=.; *leaves other values as missing;

   *parsing out local_subject_id;

   local_subject_id = scan(local_subject_id, 1, '^');
run;

*Reformatting date variables to SAS date;

proc sql;
create table nnad_untoggled_var as
	select *
	from nnad_untoggle
where local_record_id in ("&test_record1_nnad", "&test_record4_nnad", "&test_record5_nnad");
quit;

/*Transpose the starter code output*/
proc transpose data=nnad_untoggled_var out =nnad_untoggled_var2;
	ID local_record_id;
	var _all_;
run;

/*Re-format the validation untoggled var output*/
proc sql;
create table nnad_untoggle_var_order as 
select distinct a.condition
/*,a.DE_Name*/
,a.DE_Identifier_Sent_in_HL7_Messag as DE_Identifier
,a.DE_Name 
/*,b.DE_Identifier*/
,c._NAME_ as Var_Name
,c.&test_record1_nnad_n as Value_Test_Record1
,c.&test_record4_nnad_n as Value_Test_Record4
,c.&test_record5_nnad_n as Value_Test_Record5
,a.order
from DE_order as a
left join dataDict as b
on a.DE_Identifier_Sent_in_HL7_Messag=b.DE_Identifier
inner join nnad_untoggled_var2 as c
on b.Var_Name=c._NAME_
order by a.condition, a.order, c._NAME_;
quit;

/*Dedup*/
options nolabel;
PROC SORT DATA=nnad_untoggle_var_order
 OUT=nnad_untoggle_var_order_dedup
 nodupkey ;
 BY condition DE_Name DE_Identifier Var_Name Value_Test_Record1 Value_Test_Record4 Value_Test_Record5;
RUN ;

/*re-order */
proc sql;
create table nnad_untoggle_var_order_dedup_r as
select *
from nnad_untoggle_var_order_dedup
where Var_Name not in ('report_jurisdiction')
order by condition desc,order asc, Var_Name asc;
quit;

/*Export extracted data into excel*/
PROC EXPORT DATA= nnad_untoggle_var_order_dedup_r(keep=condition DE_Name DE_Identifier Var_Name Value_Test_Record1 Value_Test_Record4 Value_Test_Record5)
             OUTFILE= "&testdir\Output\Validation_Report_Untoggled.xlsx"
             DBMS=XLSX REPLACE;
      SHEET="untoggled_var";
RUN;


/********************************************************************/
/*NNAD -> Test Message ends*/
/********************************************************************/
